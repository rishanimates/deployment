version: '3.8'

networks:
  letzgo-network:
    driver: bridge

services:
  # ===========================================================================
  # Databases
  # ===========================================================================
  postgres:
    image: timescale/timescaledb-ha:pg14-latest
    container_name: letzgo-postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - TIMESCALEDB_TELEMETRY=off
    volumes:
      - letzgo-postgres-data:/var/lib/postgresql/data
      - ./00-init-dbs.sh:/docker-entrypoint-initdb.d/00-init-dbs.sh
      - ./schemas/user-schema.sql:/docker-entrypoint-initdb.d/01-user-schema.sql
      - ./schemas/user-stories.sql:/docker-entrypoint-initdb.d/01b-user-stories.sql
      - ./schemas/event-schema.sql:/docker-entrypoint-initdb.d/02-event-schema.sql
      - ./02-create-hypertable.sql:/docker-entrypoint-initdb.d/03-create-hypertable.sql
    networks:
      - letzgo-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  mongodb:
    image: mongo:6.0
    container_name: letzgo-mongodb
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=${MONGODB_PASSWORD}
    volumes:
      - letzgo-mongodb-data:/data/db
    networks:
      - letzgo-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7.2-alpine
    container_name: letzgo-redis
    ports:
      - "6379:6379"
    command: redis-server --requirepass ${REDIS_PASSWORD}
    volumes:
      - letzgo-redis-data:/data
    networks:
      - letzgo-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: letzgo-rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      - RABBITMQ_DEFAULT_USER=admin
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASSWORD}
    volumes:
      - letzgo-rabbitmq-data:/var/lib/rabbitmq
    networks:
      - letzgo-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ===========================================================================
  # Microservices
  # ===========================================================================
  auth-service:
    build:
      context: ../auth-service
      dockerfile: Dockerfile
    container_name: letzgo-auth-service
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - PORT=3000
      - POSTGRES_URL=postgresql://postgres:${POSTGRES_PASSWORD}@postgres:5432/letzgo_db?sslmode=disable
      - PGHOST=postgres
      - PGPORT=5432
      - PGUSER=postgres
      - PGPASSWORD=${POSTGRES_PASSWORD}
      - PGDATABASE=letzgo_db
      - DB_SCHEMA=auth
      - JWT_SECRET=${JWT_SECRET}
      - SERVICE_API_KEY=${SERVICE_API_KEY}
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - letzgo-network
    restart: unless-stopped
    volumes:
      - ./logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  user-service:
    build:
      context: ../user-service
      dockerfile: Dockerfile
    container_name: letzgo-user-service
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=production
      - PORT=3001
      - POSTGRES_URL=postgresql://postgres:${POSTGRES_PASSWORD}@postgres:5432/letzgo_db?sslmode=disable
      - PGHOST=postgres
      - PGPORT=5432
      - PGUSER=postgres
      - PGPASSWORD=${POSTGRES_PASSWORD}
      - PGDATABASE=letzgo_db
      - DB_SCHEMA=users
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - JWT_SECRET=${JWT_SECRET}
      - SERVICE_API_KEY=${SERVICE_API_KEY}
      - USER_SERVICE_URL=http://user-service:3001
      - AUTH_SERVICE_URL=http://auth-service:3000
      - CHAT_SERVICE_URL=http://chat-service:3002
      - EVENT_SERVICE_URL=http://event-service:3003
      - SHARED_SERVICE_URL=http://shared-service:3004
      - SPLITZ_SERVICE_URL=http://splitz-service:3005
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      auth-service:
        condition: service_healthy
    networks:
      - letzgo-network
    restart: unless-stopped
    volumes:
      - ./logs:/app/logs
      - ./uploads:/app/uploads
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  chat-service:
    build:
      context: ../chat-service
      dockerfile: Dockerfile
    container_name: letzgo-chat-service
    ports:
      - "3002:3002"
    environment:
      - NODE_ENV=production
      - PORT=3002
      - MONGO_URI=mongodb://admin:${MONGODB_PASSWORD}@mongodb:27017/letzgo-chat?authSource=admin
      - RABBITMQ_URL=amqp://admin:${RABBITMQ_PASSWORD}@rabbitmq:5672
      - USER_SERVICE_URL=http://user-service:3001/v1
      - JWT_SECRET=${JWT_SECRET}
      - SERVICE_API_KEY=${SERVICE_API_KEY}
    depends_on:
      mongodb:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      user-service:
        condition: service_healthy
    networks:
      - letzgo-network
    restart: unless-stopped
    volumes:
      - ./logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3002/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  event-service:
    build:
      context: ../event-service
      dockerfile: Dockerfile
    container_name: letzgo-event-service
    ports:
      - "3003:3003"
    environment:
      - NODE_ENV=production
      - PORT=3003
      - POSTGRES_URL=postgresql://postgres:${POSTGRES_PASSWORD}@postgres:5432/letzgo_db?sslmode=disable
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=letzgo_db
      - DB_USER=postgres
      - DB_PASSWORD=${POSTGRES_PASSWORD}
      - DB_SCHEMA=events
      - JWT_SECRET=${JWT_SECRET}
      - SERVICE_API_KEY=${SERVICE_API_KEY}
      - RAZORPAY_KEY_ID=${RAZORPAY_KEY_ID}
      - RAZORPAY_KEY_SECRET=${RAZORPAY_KEY_SECRET}
    depends_on:
      postgres:
        condition: service_healthy
      user-service:
        condition: service_healthy
    networks:
      - letzgo-network
    restart: unless-stopped
    volumes:
      - ./logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3003/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  shared-service:
    build:
      context: ../shared-service
      dockerfile: Dockerfile
    container_name: letzgo-shared-service
    ports:
      - "3004:3004"
    environment:
      - NODE_ENV=production
      - PORT=3004
      - STORAGE_PROVIDER=${STORAGE_PROVIDER:-local}
      - POSTGRES_URL=postgresql://postgres:${POSTGRES_PASSWORD}@postgres:5432/letzgo_db?sslmode=disable
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=letzgo_db
      - DB_USER=postgres
      - DB_PASSWORD=${POSTGRES_PASSWORD}
      - DB_SCHEMA=shared
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - SERVICE_API_KEY=${SERVICE_API_KEY}
      # AWS S3 Configuration (optional)
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_REGION=${AWS_REGION}
      - AWS_S3_BUCKET=${AWS_S3_BUCKET}
      # Cloudinary Configuration (optional)
      - CLOUDINARY_CLOUD_NAME=${CLOUDINARY_CLOUD_NAME}
      - CLOUDINARY_API_KEY=${CLOUDINARY_API_KEY}
      - CLOUDINARY_API_SECRET=${CLOUDINARY_API_SECRET}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - letzgo-network
    restart: unless-stopped
    volumes:
      - ./logs:/app/logs
      - ./uploads:/app/uploads
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3004/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  splitz-service:
    build:
      context: ../splitz-service
      dockerfile: Dockerfile
    container_name: letzgo-splitz-service
    ports:
      - "3005:3005"
    environment:
      - NODE_ENV=production
      - PORT=3005
      - MONGODB_URI=mongodb://admin:${MONGODB_PASSWORD}@mongodb:27017/splitz-service?authSource=admin
      - POSTGRES_URL=postgresql://postgres:${POSTGRES_PASSWORD}@postgres:5432/letzgo_db?sslmode=disable
      - DB_SCHEMA=splitz
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - JWT_SECRET=${JWT_SECRET}
      - SERVICE_API_KEY=${SERVICE_API_KEY}
    depends_on:
      mongodb:
        condition: service_healthy
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      shared-service:
        condition: service_healthy
    networks:
      - letzgo-network
    restart: unless-stopped
    volumes:
      - ./logs:/app/logs
      - ./uploads:/app/uploads
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3005/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ===========================================================================
  # Reverse Proxy / Load Balancer
  # ===========================================================================
  nginx:
    image: nginx:alpine
    container_name: letzgo-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./ssl:/etc/nginx/ssl
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - auth-service
      - user-service
      - chat-service
      - event-service
      - shared-service
      - splitz-service
    networks:
      - letzgo-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  letzgo-postgres-data:
    driver: local
  letzgo-mongodb-data:
    driver: local
  letzgo-redis-data:
    driver: local
  letzgo-rabbitmq-data:
    driver: local
