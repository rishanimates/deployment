name: 🏗️ Deploy Fresh Infrastructure

on:
  push:
    branches: [ main ]
    paths:
      - 'deployment/**'
      - '.github/workflows/deploy.yml'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production
      force_rebuild:
        description: 'Force complete rebuild (removes all existing data)'
        required: false
        default: false
        type: boolean

env:
  DEPLOY_PATH: '/opt/letzgo'
  ENVIRONMENT: ${{ github.event.inputs.environment || 'staging' }}

jobs:
  # ===========================================================================
  # Prepare Infrastructure Deployment
  # ===========================================================================
  prepare:
    name: Prepare Infrastructure
    runs-on: ubuntu-latest
    
    outputs:
      version: ${{ steps.version.outputs.version }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Generate version
        id: version
        run: |
          VERSION="v$(date +%Y%m%d-%H%M%S)-${GITHUB_SHA::7}"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Generated version: $VERSION"

      - name: Create infrastructure deployment package
        run: |
          # Debug: Show current directory and structure
          echo "🔍 Current working directory: $(pwd)"
          echo "📁 Directory contents:"
          ls -la
          
          # Create infrastructure deployment package
          mkdir -p /tmp/letzgo-infrastructure
          
          # Check if we're in a deployment-specific repo or multi-service repo
          if [ -d "deployment" ]; then
            echo "📦 Found deployment directory - copying from deployment/*"
            cp -r deployment/* /tmp/letzgo-infrastructure/
            
            # Copy database schemas from services
            mkdir -p /tmp/letzgo-infrastructure/schemas
            
            # Copy schemas if they exist
            if [ -f "user-service/src/database/schema.sql" ]; then
              cp "user-service/src/database/schema.sql" /tmp/letzgo-infrastructure/schemas/user-schema.sql
              echo "✅ Copied user-service schema"
            fi
            
            if [ -f "user-service/src/database/stories.sql" ]; then
              cp "user-service/src/database/stories.sql" /tmp/letzgo-infrastructure/schemas/user-stories.sql
              echo "✅ Copied user-service stories"
            fi
            
            if [ -f "event-service/src/database/schema.sql" ]; then
              cp "event-service/src/database/schema.sql" /tmp/letzgo-infrastructure/schemas/event-schema.sql
              echo "✅ Copied event-service schema"
            fi
          else
            echo "📦 No deployment directory found - assuming we're in deployment repo"
            echo "📁 Copying current directory contents (excluding .git and .github)"
            
            # Copy all files except .git and .github directories
            find . -maxdepth 1 -not -name '.' -not -name '.git*' -not -name '.github*' -exec cp -r {} /tmp/letzgo-infrastructure/ \;
            
            # Create schemas directory
            mkdir -p /tmp/letzgo-infrastructure/schemas
            echo "⚠️  No service directories found - schemas will be empty"
          fi
          
          # List what we're packaging (for debugging)
          echo "📦 Infrastructure package contents:"
          find /tmp/letzgo-infrastructure -type f | head -20
          
          # Create tarball
          cd /tmp
          tar -czf letzgo-infrastructure.tar.gz letzgo-infrastructure/
          
          echo "📦 Infrastructure package created ($(du -h letzgo-infrastructure.tar.gz | cut -f1))"

      - name: Upload infrastructure artifact
        uses: actions/upload-artifact@v4
        with:
          name: letzgo-infrastructure-${{ steps.version.outputs.version }}
          path: /tmp/letzgo-infrastructure.tar.gz
          retention-days: 30

  # ===========================================================================
  # Deploy Infrastructure to Production
  # ===========================================================================
  deploy:
    name: Deploy Infrastructure to VPS
    runs-on: ubuntu-latest
    needs: prepare
    environment: 
      name: staging
      url: http://103.168.19.241
    
    steps:
      - name: Download infrastructure artifact
        uses: actions/download-artifact@v4
        with:
          name: letzgo-infrastructure-${{ needs.prepare.outputs.version }}

      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.VPS_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -p ${{ secrets.VPS_PORT }} ${{ secrets.VPS_HOST }} >> ~/.ssh/known_hosts

      - name: Copy infrastructure files to VPS
        run: |
          scp -P ${{ secrets.VPS_PORT }} -o StrictHostKeyChecking=no \
            letzgo-infrastructure.tar.gz \
            ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }}:/tmp/

      - name: Deploy fresh infrastructure on VPS using script
        run: |
          # Copy infrastructure deployment script
          scp -P ${{ secrets.VPS_PORT }} -o StrictHostKeyChecking=no \
            scripts/deploy-infrastructure-via-actions.sh \
            ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }}:/tmp/
          
          # Execute infrastructure deployment via script
          ssh -p ${{ secrets.VPS_PORT }} -o StrictHostKeyChecking=no \
            ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} \
            "chmod +x /tmp/deploy-infrastructure-via-actions.sh && /tmp/deploy-infrastructure-via-actions.sh ${{ github.event.inputs.force_rebuild }}"

      - name: Verify infrastructure deployment
        run: |
          # Wait for databases to start
          sleep 30
          
          # Check if infrastructure is running
          ssh -p ${{ secrets.VPS_PORT }} -o StrictHostKeyChecking=no \
            ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} << 'EOF'
          
          echo "🔍 Verifying infrastructure deployment..."
          
          # Check if databases are running
          databases=("letzgo-postgres:5432" "letzgo-mongodb:27017" "letzgo-redis:6379" "letzgo-rabbitmq:5672")
          healthy_dbs=0
          
          for db in "${databases[@]}"; do
            container_name=$(echo $db | cut -d: -f1)
            port=$(echo $db | cut -d: -f2)
            
            if docker ps | grep -q "$container_name"; then
              echo "✅ $container_name is running"
              healthy_dbs=$((healthy_dbs + 1))
            else
              echo "❌ $container_name is not running"
            fi
          done
          
          # Show running containers
          echo "📋 Running infrastructure containers:"
          docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}" | grep letzgo || echo "No letzgo containers found"
          
          if [ $healthy_dbs -ge 3 ]; then
            echo "✅ Infrastructure deployment verification passed"
          else
            echo "❌ Infrastructure deployment verification failed"
            echo "📋 All containers:"
            docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
            exit 1
          fi
          
          echo "🎉 Infrastructure is ready for service deployments!"
          EOF

      - name: Cleanup
        if: always()
        run: |
          # Clean up SSH key
          rm -f ~/.ssh/id_rsa
          
          # Clean up temporary files on VPS
          ssh -p ${{ secrets.VPS_PORT }} -o StrictHostKeyChecking=no \
            ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} \
            "rm -f /tmp/letzgo-infrastructure.tar.gz; rm -rf /tmp/letzgo-infrastructure" || true

  # ===========================================================================
  # Post-deployment notifications
  # ===========================================================================
  notify:
    name: Notify Infrastructure Deployment Status
    runs-on: ubuntu-latest
    needs: [prepare, deploy]
    if: always()
    
    steps:
      - name: Notify success
        if: needs.deploy.result == 'success'
        run: |
          echo "✅ Infrastructure deployment successful!"
          echo "Version: ${{ needs.prepare.outputs.version }}"
          echo "Environment: staging"
          echo "Infrastructure: Databases and messaging services are ready"
          echo "VPS: http://103.168.19.241"
          echo ""
          echo "🔄 Next steps:"
          echo "1. Deploy services using the 'Deploy Services' workflow"
          echo "2. Or push changes to service directories to trigger automatic deployment"

      - name: Notify failure
        if: needs.deploy.result == 'failure'
        run: |
          echo "❌ Infrastructure deployment failed!"
          echo "Version: ${{ needs.prepare.outputs.version }}"
          echo "Please check the deployment logs for details."
          echo ""
          echo "🔧 Troubleshooting:"
          echo "1. Check VPS connectivity and SSH access"
          echo "2. Verify environment variables in .env file"
          echo "3. Check Docker service status on VPS"
          echo "4. Review deployment logs on VPS: /opt/letzgo/logs/"