name: üöÄ Simple Infrastructure Deployment

on:
  workflow_dispatch:
    inputs:
      force_rebuild:
        description: 'Force complete rebuild (removes all existing data)'
        required: false
        default: false
        type: boolean

env:
  DEPLOY_PATH: '/opt/letzgo'

jobs:
  deploy:
    name: Deploy Simple Infrastructure
    runs-on: ubuntu-latest
    environment: 
      name: staging
      url: http://103.168.19.241
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.VPS_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -p ${{ secrets.VPS_PORT }} ${{ secrets.VPS_HOST }} >> ~/.ssh/known_hosts

      - name: Test SSH connection
        run: |
          echo "üîç Testing SSH connection..."
          ssh -p ${{ secrets.VPS_PORT }} -o StrictHostKeyChecking=no \
            ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} \
            "echo '‚úÖ SSH connection successful' && whoami && pwd && date"

      - name: Copy simple deployment script to VPS
        run: |
          echo "üì§ Copying simple deployment script to VPS..."
          scp -P ${{ secrets.VPS_PORT }} -o StrictHostKeyChecking=no \
            deployment/scripts/simple-infrastructure-deploy.sh \
            ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }}:/tmp/
          echo "‚úÖ Script copied successfully"

      - name: Execute simple infrastructure deployment
        run: |
          echo "üöÄ Executing simple infrastructure deployment..."
          ssh -p ${{ secrets.VPS_PORT }} -o StrictHostKeyChecking=no \
            ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} \
            "chmod +x /tmp/simple-infrastructure-deploy.sh && /tmp/simple-infrastructure-deploy.sh"

      - name: Verify deployment
        run: |
          echo "üîç Verifying deployment..."
          ssh -p ${{ secrets.VPS_PORT }} -o StrictHostKeyChecking=no \
            ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} << 'EOF'
          
          echo "üìä Deployment verification:"
          echo ""
          
          # Check if containers are running
          echo "üê≥ Running containers:"
          docker ps --format "table {{.Names}}\t{{.Status}}" | grep letzgo || echo "No letzgo containers found"
          echo ""
          
          # Check networks
          echo "üåê Networks:"
          docker network ls | grep letzgo || echo "No letzgo networks found"
          echo ""
          
          # Check if environment file exists
          if [ -f "/opt/letzgo/.env" ]; then
            echo "‚úÖ Environment file exists"
          else
            echo "‚ùå Environment file missing"
          fi
          
          # Check if Docker Compose file exists
          if [ -f "/opt/letzgo/docker-compose.yml" ]; then
            echo "‚úÖ Docker Compose file exists"
          else
            echo "‚ùå Docker Compose file missing"
          fi
          
          echo ""
          echo "üéØ Simple infrastructure deployment verification completed"
          EOF

      - name: Cleanup SSH
        if: always()
        run: |
          rm -f ~/.ssh/id_rsa

  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: deploy
    if: always()
    
    steps:
      - name: Notify success
        if: needs.deploy.result == 'success'
        run: |
          echo "‚úÖ Simple infrastructure deployment successful!"
          echo "üåê VPS: 103.168.19.241"
          echo "üóÑÔ∏è PostgreSQL: Port 5432"
          echo "üóÑÔ∏è MongoDB: Port 27017"
          echo "üóÑÔ∏è Redis: Port 6379"
          echo "üóÑÔ∏è RabbitMQ: Port 5672 (Management: 15672)"

      - name: Notify failure
        if: needs.deploy.result == 'failure'
        run: |
          echo "‚ùå Simple infrastructure deployment failed!"
          echo "Please check the deployment logs for details."
          echo "Common issues:"
          echo "- SSH connection problems"
          echo "- Docker not running on VPS"
          echo "- Port conflicts"
          echo "- Insufficient permissions"
