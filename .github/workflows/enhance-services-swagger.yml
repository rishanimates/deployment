name: üìö Enhance Services with Swagger

on:
  workflow_dispatch:
    inputs:
      services:
        description: 'Services to enhance: auth-service,user-service,chat-service,event-service,shared-service,splitz-service or "all"'
        required: false
        default: 'all'
        type: string
      redeploy:
        description: 'Redeploy services after enhancement'
        required: false
        default: true
        type: boolean

jobs:
  enhance-services:
    name: Enhance Services with Swagger
    runs-on: ubuntu-latest
    environment: staging
    
    steps:
      - name: Checkout deployment repo
        uses: actions/checkout@v4

      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.VPS_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -p ${{ secrets.VPS_PORT }} ${{ secrets.VPS_HOST }} >> ~/.ssh/known_hosts

      - name: Test SSH connection
        run: |
          ssh -p ${{ secrets.VPS_PORT }} -o StrictHostKeyChecking=no \
            ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} \
            "echo '‚úÖ SSH connection successful' && whoami && date"

      - name: Copy enhancement script
        run: |
          scp -P ${{ secrets.VPS_PORT }} -o StrictHostKeyChecking=no \
            enhance-services-with-swagger.sh \
            ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }}:/tmp/

      - name: Enhance services with Swagger
        run: |
          ssh -p ${{ secrets.VPS_PORT }} -o StrictHostKeyChecking=no \
            ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} \
            "chmod +x /tmp/enhance-services-with-swagger.sh && /tmp/enhance-services-with-swagger.sh"

      - name: Copy parallel deployment script
        if: ${{ github.event.inputs.redeploy == 'true' }}
        run: |
          scp -P ${{ secrets.VPS_PORT }} -o StrictHostKeyChecking=no \
            deploy-services-parallel.sh \
            ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }}:/tmp/

      - name: Redeploy services with Swagger
        if: ${{ github.event.inputs.redeploy == 'true' }}
        run: |
          ssh -p ${{ secrets.VPS_PORT }} -o StrictHostKeyChecking=no \
            ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} \
            "chmod +x /tmp/deploy-services-parallel.sh && /tmp/deploy-services-parallel.sh '${{ github.event.inputs.services }}' main --force-rebuild"

      - name: Verify Swagger documentation
        run: |
          ssh -p ${{ secrets.VPS_PORT }} -o StrictHostKeyChecking=no \
            ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} << 'EOF'
          
          echo "üîç Verifying Swagger documentation for services..."
          echo ""
          
          # Service ports
          declare -A SERVICE_PORTS=(
            ["auth-service"]="3000"
            ["user-service"]="3001"
            ["chat-service"]="3002"
            ["event-service"]="3003"
            ["shared-service"]="3004"
            ["splitz-service"]="3005"
          )
          
          # Test each service
          for service in "${!SERVICE_PORTS[@]}"; do
            port="${SERVICE_PORTS[$service]}"
            
            echo "Testing $service (port $port):"
            
            # Test health endpoint
            if curl -f -s --connect-timeout 5 "http://localhost:$port/health" >/dev/null 2>&1; then
              echo "  ‚úÖ Health endpoint: Working"
            else
              echo "  ‚ùå Health endpoint: Failed"
              continue
            fi
            
            # Test Swagger UI endpoint
            if curl -f -s --connect-timeout 5 "http://localhost:$port/api-docs/" >/dev/null 2>&1; then
              echo "  ‚úÖ Swagger UI: Available at http://103.168.19.241:$port/api-docs"
            else
              echo "  ‚ùå Swagger UI: Not available"
            fi
            
            # Test OpenAPI spec endpoint
            if curl -f -s --connect-timeout 5 "http://localhost:$port/swagger.json" >/dev/null 2>&1; then
              echo "  ‚úÖ OpenAPI Spec: Available at http://103.168.19.241:$port/swagger.json"
            else
              echo "  ‚ùå OpenAPI Spec: Not available"
            fi
            
            # Test status endpoint
            if curl -f -s --connect-timeout 5 "http://localhost:$port/api/v1/status" >/dev/null 2>&1; then
              echo "  ‚úÖ Status endpoint: Working"
            else
              echo "  ‚ùå Status endpoint: Failed"
            fi
            
            echo ""
          done
          
          echo "üìö Swagger Documentation URLs:"
          for service in "${!SERVICE_PORTS[@]}"; do
            port="${SERVICE_PORTS[$service]}"
            echo "  üìñ $service: http://103.168.19.241:$port/api-docs"
          done
          
          echo ""
          echo "üéâ Swagger enhancement verification completed!"
          EOF

      - name: Generate summary
        run: |
          echo "üìä Swagger Enhancement Summary"
          echo "=============================="
          echo ""
          echo "‚úÖ Services enhanced with Swagger documentation"
          echo "‚úÖ OpenAPI 3.0 specifications generated"
          echo "‚úÖ Interactive Swagger UI available"
          echo "‚úÖ Host configuration fixed for production"
          echo ""
          echo "üìö Documentation Features:"
          echo "  ‚Ä¢ Interactive API testing"
          echo "  ‚Ä¢ Comprehensive endpoint documentation"
          echo "  ‚Ä¢ Schema definitions and examples"
          echo "  ‚Ä¢ Authentication configuration"
          echo "  ‚Ä¢ Proper server URLs (103.168.19.241)"
          echo ""
          echo "üîó Access Swagger Documentation:"
          echo "  ‚Ä¢ Auth Service: http://103.168.19.241:3000/api-docs"
          echo "  ‚Ä¢ User Service: http://103.168.19.241:3001/api-docs"
          echo "  ‚Ä¢ Chat Service: http://103.168.19.241:3002/api-docs"
          echo "  ‚Ä¢ Event Service: http://103.168.19.241:3003/api-docs"
          echo "  ‚Ä¢ Shared Service: http://103.168.19.241:3004/api-docs"
          echo "  ‚Ä¢ Splitz Service: http://103.168.19.241:3005/api-docs"

      - name: Cleanup SSH
        if: always()
        run: rm -f ~/.ssh/id_rsa
