name: Rollback Deployment

on:
  workflow_dispatch:
    inputs:
      backup_timestamp:
        description: 'Backup timestamp to rollback to (format: YYYYMMDD_HHMMSS)'
        required: true
        type: string
      confirm_rollback:
        description: 'Type "CONFIRM" to proceed with rollback'
        required: true
        type: string

env:
  DEPLOY_PATH: '/opt/letzgo'

jobs:
  # ===========================================================================
  # Validate Rollback Request
  # ===========================================================================
  validate:
    name: Validate Rollback Request
    runs-on: ubuntu-latest
    
    steps:
      - name: Validate confirmation
        run: |
          if [ "${{ github.event.inputs.confirm_rollback }}" != "CONFIRM" ]; then
            echo "‚ùå Rollback not confirmed. Please type 'CONFIRM' to proceed."
            exit 1
          fi
          echo "‚úÖ Rollback confirmed"

      - name: Validate backup timestamp format
        run: |
          timestamp="${{ github.event.inputs.backup_timestamp }}"
          if [[ ! $timestamp =~ ^[0-9]{8}_[0-9]{6}$ ]]; then
            echo "‚ùå Invalid backup timestamp format. Expected: YYYYMMDD_HHMMSS"
            exit 1
          fi
          echo "‚úÖ Backup timestamp format is valid: $timestamp"

  # ===========================================================================
  # Perform Rollback
  # ===========================================================================
  rollback:
    name: Rollback to Previous Version
    runs-on: ubuntu-latest
    needs: validate
    environment: 
      name: production
      url: http://103.168.19.241
    
    steps:
      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.VPS_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -p ${{ secrets.VPS_PORT }} ${{ secrets.VPS_HOST }} >> ~/.ssh/known_hosts

      - name: Check backup exists
        run: |
          ssh -p ${{ secrets.VPS_PORT }} -o StrictHostKeyChecking=no \
            ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} << 'EOF'
          
          BACKUP_PATH="${{ env.DEPLOY_PATH }}/backups/backup_${{ github.event.inputs.backup_timestamp }}"
          
          if [ ! -d "$BACKUP_PATH" ]; then
            echo "‚ùå Backup not found at: $BACKUP_PATH"
            echo "Available backups:"
            ls -la "${{ env.DEPLOY_PATH }}/backups/" || echo "No backups directory found"
            exit 1
          fi
          
          echo "‚úÖ Backup found at: $BACKUP_PATH"
          ls -la "$BACKUP_PATH"
          EOF

      - name: Create pre-rollback backup
        run: |
          ssh -p ${{ secrets.VPS_PORT }} -o StrictHostKeyChecking=no \
            ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} << 'EOF'
          
          set -e
          
          echo "üì¶ Creating pre-rollback backup..."
          
          TIMESTAMP=$(date +"%Y%m%d_%H%M%S")
          PRE_ROLLBACK_BACKUP="${{ env.DEPLOY_PATH }}/backups/pre_rollback_$TIMESTAMP"
          
          mkdir -p "$PRE_ROLLBACK_BACKUP"
          
          # Backup current application
          if [ -d "${{ env.DEPLOY_PATH }}/app" ]; then
            cp -r "${{ env.DEPLOY_PATH }}/app" "$PRE_ROLLBACK_BACKUP/"
          fi
          
          # Backup current environment
          if [ -f "${{ env.DEPLOY_PATH }}/.env" ]; then
            cp "${{ env.DEPLOY_PATH }}/.env" "$PRE_ROLLBACK_BACKUP/"
          fi
          
          # Backup current docker-compose
          if [ -f "${{ env.DEPLOY_PATH }}/docker-compose.prod.yml" ]; then
            cp "${{ env.DEPLOY_PATH }}/docker-compose.prod.yml" "$PRE_ROLLBACK_BACKUP/"
          fi
          
          echo "‚úÖ Pre-rollback backup created at: $PRE_ROLLBACK_BACKUP"
          EOF

      - name: Stop current services
        run: |
          ssh -p ${{ secrets.VPS_PORT }} -o StrictHostKeyChecking=no \
            ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} << 'EOF'
          
          echo "üõë Stopping current services..."
          
          cd "${{ env.DEPLOY_PATH }}"
          if [ -f "docker-compose.prod.yml" ]; then
            docker-compose -f docker-compose.prod.yml down || echo "Services were not running"
          fi
          
          echo "‚úÖ Services stopped"
          EOF

      - name: Restore from backup
        run: |
          ssh -p ${{ secrets.VPS_PORT }} -o StrictHostKeyChecking=no \
            ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} << 'EOF'
          
          set -e
          
          echo "üîÑ Restoring from backup..."
          
          BACKUP_PATH="${{ env.DEPLOY_PATH }}/backups/backup_${{ github.event.inputs.backup_timestamp }}"
          
          # Remove current application
          rm -rf "${{ env.DEPLOY_PATH }}/app"
          
          # Restore application from backup
          if [ -d "$BACKUP_PATH/app" ]; then
            cp -r "$BACKUP_PATH/app" "${{ env.DEPLOY_PATH }}/"
            echo "‚úÖ Application restored from backup"
          else
            echo "‚ùå No application found in backup"
            exit 1
          fi
          
          # Restore environment file if it exists in backup
          if [ -f "$BACKUP_PATH/.env" ]; then
            cp "$BACKUP_PATH/.env" "${{ env.DEPLOY_PATH }}/"
            echo "‚úÖ Environment file restored from backup"
          else
            echo "‚ö†Ô∏è  No environment file found in backup, keeping current one"
          fi
          
          # Set proper permissions
          chown -R root:root "${{ env.DEPLOY_PATH }}/app"
          
          echo "‚úÖ Restore completed"
          EOF

      - name: Start services
        run: |
          ssh -p ${{ secrets.VPS_PORT }} -o StrictHostKeyChecking=no \
            ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} << 'EOF'
          
          set -e
          
          echo "üöÄ Starting services..."
          
          cd "${{ env.DEPLOY_PATH }}"
          
          # Load environment variables
          if [ -f ".env" ]; then
            set -a
            source .env
            set +a
          fi
          
          # Start services
          if [ -f "docker-compose.prod.yml" ]; then
            docker-compose -f docker-compose.prod.yml up -d
            echo "‚úÖ Services started"
          else
            echo "‚ùå docker-compose.prod.yml not found"
            exit 1
          fi
          EOF

      - name: Wait for services to be healthy
        run: |
          ssh -p ${{ secrets.VPS_PORT }} -o StrictHostKeyChecking=no \
            ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} << 'EOF'
          
          echo "‚è≥ Waiting for services to be healthy..."
          
          max_attempts=30
          attempt=1
          
          while [ $attempt -le $max_attempts ]; do
            echo "Health check attempt $attempt/$max_attempts"
            
            if curl -f -s http://localhost/health > /dev/null; then
              echo "‚úÖ API Gateway is healthy"
              break
            fi
            
            if [ $attempt -eq $max_attempts ]; then
              echo "‚ùå Services failed to become healthy within timeout"
              exit 1
            fi
            
            sleep 10
            attempt=$((attempt + 1))
          done
          EOF

      - name: Verify rollback
        run: |
          ssh -p ${{ secrets.VPS_PORT }} -o StrictHostKeyChecking=no \
            ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} << 'EOF'
          
          echo "üîç Verifying rollback..."
          
          # Check main API Gateway
          if curl -f -s http://localhost/health > /dev/null; then
            echo "‚úÖ API Gateway is responding"
          else
            echo "‚ùå API Gateway is not responding"
            exit 1
          fi
          
          # Check individual services
          services=("3000" "3001" "3002" "3003" "3004" "3005")
          healthy_services=0
          
          for port in "${services[@]}"; do
            if curl -f -s "http://localhost:$port/health" > /dev/null; then
              echo "‚úÖ Service on port $port is responding"
              healthy_services=$((healthy_services + 1))
            else
              echo "‚ö†Ô∏è  Service on port $port is not responding"
            fi
          done
          
          echo "üìä $healthy_services out of ${#services[@]} services are healthy"
          
          # Show running containers
          echo "üìã Running containers:"
          docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
          
          if [ $healthy_services -ge 4 ]; then
            echo "‚úÖ Rollback verification passed (minimum services are healthy)"
          else
            echo "‚ùå Rollback verification failed (too few services are healthy)"
            exit 1
          fi
          EOF

      - name: Cleanup
        if: always()
        run: |
          # Clean up SSH key
          rm -f ~/.ssh/id_rsa

  # ===========================================================================
  # Notify Rollback Status
  # ===========================================================================
  notify:
    name: Notify Rollback Status
    runs-on: ubuntu-latest
    needs: [validate, rollback]
    if: always()
    
    steps:
      - name: Notify success
        if: needs.rollback.result == 'success'
        run: |
          echo "‚úÖ Rollback successful!"
          echo "Rolled back to backup: ${{ github.event.inputs.backup_timestamp }}"
          echo "Environment: production"
          echo "URL: http://103.168.19.241"

      - name: Notify failure
        if: needs.rollback.result == 'failure'
        run: |
          echo "‚ùå Rollback failed!"
          echo "Backup timestamp: ${{ github.event.inputs.backup_timestamp }}"
          echo "Please check the rollback logs and perform manual recovery if necessary."
          echo "A pre-rollback backup was created and can be used for recovery."
