name: Deploy Services

on:
  push:
    branches: [ main ]
    paths:
      - 'auth-service/**'
      - 'user-service/**'
      - 'chat-service/**'
      - 'event-service/**'
      - 'shared-service/**'
      - 'splitz-service/**'
  workflow_dispatch:
    inputs:
      services:
        description: 'Services to deploy (comma-separated: auth-service,user-service,chat-service,event-service,shared-service,splitz-service)'
        required: true
        default: 'all'
        type: string
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

env:
  NODE_VERSION: '18'
  DEPLOY_PATH: '/opt/letzgo'

jobs:
  # ===========================================================================
  # Detect Changed Services
  # ===========================================================================
  detect-changes:
    name: Detect Changed Services
    runs-on: ubuntu-latest
    outputs:
      services: ${{ steps.changes.outputs.services }}
      matrix: ${{ steps.changes.outputs.matrix }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Detect changed services
        id: changes
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            # Manual trigger - use input services
            if [ "${{ github.event.inputs.services }}" = "all" ]; then
              SERVICES="auth-service,user-service,chat-service,event-service,shared-service,splitz-service"
            else
              SERVICES="${{ github.event.inputs.services }}"
            fi
          else
            # Automatic trigger - detect changed services
            CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD)
            SERVICES=""
            
            if echo "$CHANGED_FILES" | grep -q "^auth-service/"; then
              SERVICES="$SERVICES,auth-service"
            fi
            if echo "$CHANGED_FILES" | grep -q "^user-service/"; then
              SERVICES="$SERVICES,user-service"
            fi
            if echo "$CHANGED_FILES" | grep -q "^chat-service/"; then
              SERVICES="$SERVICES,chat-service"
            fi
            if echo "$CHANGED_FILES" | grep -q "^event-service/"; then
              SERVICES="$SERVICES,event-service"
            fi
            if echo "$CHANGED_FILES" | grep -q "^shared-service/"; then
              SERVICES="$SERVICES,shared-service"
            fi
            if echo "$CHANGED_FILES" | grep -q "^splitz-service/"; then
              SERVICES="$SERVICES,splitz-service"
            fi
            
            # Remove leading comma
            SERVICES=$(echo "$SERVICES" | sed 's/^,//')
          fi
          
          if [ -z "$SERVICES" ]; then
            echo "No services to deploy"
            echo "services=" >> $GITHUB_OUTPUT
            echo "matrix={\"include\":[]}" >> $GITHUB_OUTPUT
          else
            echo "Services to deploy: $SERVICES"
            echo "services=$SERVICES" >> $GITHUB_OUTPUT
            
            # Create matrix for parallel deployment
            MATRIX_SERVICES=$(echo "$SERVICES" | tr ',' '\n' | sed 's/^/{"service":"/' | sed 's/$/"}/' | tr '\n' ',' | sed 's/,$//')
            echo "matrix={\"include\":[$MATRIX_SERVICES]}" >> $GITHUB_OUTPUT
          fi

  # ===========================================================================
  # Build and Test Services
  # ===========================================================================
  build:
    name: Build Service
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.services != ''
    
    strategy:
      matrix: ${{ fromJson(needs.detect-changes.outputs.matrix) }}
      fail-fast: false
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ${{ matrix.service }}/package-lock.json

      - name: Install dependencies for ${{ matrix.service }}
        run: |
          cd ${{ matrix.service }}
          npm ci

      - name: Run tests for ${{ matrix.service }}
        run: |
          cd ${{ matrix.service }}
          npm test || echo "No tests or tests failed for ${{ matrix.service }}"

      - name: Build Docker image for ${{ matrix.service }}
        run: |
          cd ${{ matrix.service }}
          docker build -t letzgo-${{ matrix.service }}:latest .
          docker save letzgo-${{ matrix.service }}:latest > ../letzgo-${{ matrix.service }}-image.tar

      - name: Upload Docker image
        uses: actions/upload-artifact@v4
        with:
          name: letzgo-${{ matrix.service }}-image
          path: letzgo-${{ matrix.service }}-image.tar
          retention-days: 1

  # ===========================================================================
  # Deploy Services to Production
  # ===========================================================================
  deploy:
    name: Deploy Services to VPS
    runs-on: ubuntu-latest
    needs: [detect-changes, build]
    if: needs.detect-changes.outputs.services != ''
    environment: 
      name: staging
      url: http://103.168.19.241
    
    strategy:
      matrix: ${{ fromJson(needs.detect-changes.outputs.matrix) }}
      fail-fast: false
      max-parallel: 2  # Deploy services in batches to avoid overwhelming the VPS
    
    steps:
      - name: Download Docker image for ${{ matrix.service }}
        uses: actions/download-artifact@v4
        with:
          name: letzgo-${{ matrix.service }}-image

      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.VPS_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -p ${{ secrets.VPS_PORT }} ${{ secrets.VPS_HOST }} >> ~/.ssh/known_hosts

      - name: Copy Docker image to VPS
        run: |
          scp -P ${{ secrets.VPS_PORT }} -o StrictHostKeyChecking=no \
            letzgo-${{ matrix.service }}-image.tar \
            ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }}:/tmp/

      - name: Deploy ${{ matrix.service }} on VPS
        run: |
          ssh -p ${{ secrets.VPS_PORT }} -o StrictHostKeyChecking=no \
            ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} << EOF
          
          set -e
          
          echo "üöÄ Deploying ${{ matrix.service }}..."
          
          # Load Docker image
          docker load < /tmp/letzgo-${{ matrix.service }}-image.tar
          
          # Stop existing container if running
          docker stop letzgo-${{ matrix.service }} || true
          docker rm letzgo-${{ matrix.service }} || true
          
          # Load environment variables
          cd "${{ env.DEPLOY_PATH }}"
          if [ -f ".env" ]; then
            set -a
            source .env
            set +a
          else
            echo "‚ùå Environment file not found!"
            exit 1
          fi
          
          # Determine service port
          case "${{ matrix.service }}" in
            "auth-service") PORT=3000 ;;
            "user-service") PORT=3001 ;;
            "chat-service") PORT=3002 ;;
            "event-service") PORT=3003 ;;
            "shared-service") PORT=3004 ;;
            "splitz-service") PORT=3005 ;;
            *) echo "Unknown service: ${{ matrix.service }}"; exit 1 ;;
          esac
          
          # Run new container
          docker run -d \
            --name letzgo-${{ matrix.service }} \
            --network letzgo-network \
            -p \$PORT:\$PORT \
            --env-file .env \
            -e NODE_ENV=staging \
            -e PORT=\$PORT \
            -v "${{ env.DEPLOY_PATH }}/logs:/app/logs" \
            -v "${{ env.DEPLOY_PATH }}/uploads:/app/uploads" \
            --restart unless-stopped \
            letzgo-${{ matrix.service }}:latest
          
          echo "‚úÖ ${{ matrix.service }} deployed successfully!"
          
          # Clean up image file
          rm -f /tmp/letzgo-${{ matrix.service }}-image.tar
          EOF

      - name: Wait for ${{ matrix.service }} to be healthy
        run: |
          ssh -p ${{ secrets.VPS_PORT }} -o StrictHostKeyChecking=no \
            ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} << EOF
          
          # Determine service port
          case "${{ matrix.service }}" in
            "auth-service") PORT=3000 ;;
            "user-service") PORT=3001 ;;
            "chat-service") PORT=3002 ;;
            "event-service") PORT=3003 ;;
            "shared-service") PORT=3004 ;;
            "splitz-service") PORT=3005 ;;
          esac
          
          echo "‚è≥ Waiting for ${{ matrix.service }} to be healthy on port \$PORT..."
          
          max_attempts=30
          attempt=1
          
          while [ \$attempt -le \$max_attempts ]; do
            if curl -f -s http://localhost:\$PORT/health > /dev/null 2>&1; then
              echo "‚úÖ ${{ matrix.service }} is healthy!"
              break
            fi
            
            if [ \$attempt -eq \$max_attempts ]; then
              echo "‚ùå ${{ matrix.service }} failed to become healthy"
              docker logs letzgo-${{ matrix.service }} --tail 50
              exit 1
            fi
            
            echo "Attempt \$attempt/\$max_attempts - waiting 10 seconds..."
            sleep 10
            attempt=\$((attempt + 1))
          done
          EOF

      - name: Cleanup SSH
        if: always()
        run: |
          rm -f ~/.ssh/id_rsa

  # ===========================================================================
  # Update Nginx Configuration
  # ===========================================================================
  update-nginx:
    name: Update Nginx Configuration
    runs-on: ubuntu-latest
    needs: [detect-changes, deploy]
    if: needs.detect-changes.outputs.services != '' && !cancelled()
    
    steps:
      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.VPS_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -p ${{ secrets.VPS_PORT }} ${{ secrets.VPS_HOST }} >> ~/.ssh/known_hosts

      - name: Reload Nginx configuration
        run: |
          ssh -p ${{ secrets.VPS_PORT }} -o StrictHostKeyChecking=no \
            ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} << 'EOF'
          
          echo "üîÑ Reloading Nginx configuration..."
          
          # Check if Nginx is running
          if docker ps | grep -q letzgo-nginx; then
            # Reload Nginx configuration
            docker exec letzgo-nginx nginx -s reload || {
              echo "‚ö†Ô∏è  Nginx reload failed, restarting container..."
              docker restart letzgo-nginx
            }
            echo "‚úÖ Nginx configuration reloaded"
          else
            echo "‚ö†Ô∏è  Nginx container not found - services will be accessible directly by port"
          fi
          EOF

      - name: Cleanup SSH
        if: always()
        run: |
          rm -f ~/.ssh/id_rsa

  # ===========================================================================
  # Verify Deployment
  # ===========================================================================
  verify:
    name: Verify Service Deployment
    runs-on: ubuntu-latest
    needs: [detect-changes, deploy, update-nginx]
    if: needs.detect-changes.outputs.services != '' && !cancelled()
    
    steps:
      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.VPS_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -p ${{ secrets.VPS_PORT }} ${{ secrets.VPS_HOST }} >> ~/.ssh/known_hosts

      - name: Verify deployed services
        run: |
          ssh -p ${{ secrets.VPS_PORT }} -o StrictHostKeyChecking=no \
            ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} << 'EOF'
          
          echo "üîç Verifying deployed services..."
          
          SERVICES="${{ needs.detect-changes.outputs.services }}"
          IFS=',' read -ra SERVICE_ARRAY <<< "$SERVICES"
          
          healthy_services=0
          total_services=${#SERVICE_ARRAY[@]}
          
          for service in "${SERVICE_ARRAY[@]}"; do
            case "$service" in
              "auth-service") PORT=3000 ;;
              "user-service") PORT=3001 ;;
              "chat-service") PORT=3002 ;;
              "event-service") PORT=3003 ;;
              "shared-service") PORT=3004 ;;
              "splitz-service") PORT=3005 ;;
            esac
            
            if curl -f -s "http://localhost:$PORT/health" > /dev/null; then
              echo "‚úÖ $service is responding on port $PORT"
              healthy_services=$((healthy_services + 1))
            else
              echo "‚ùå $service is not responding on port $PORT"
              docker logs letzgo-$service --tail 20
            fi
          done
          
          echo "üìä $healthy_services out of $total_services services are healthy"
          
          # Show running containers
          echo "üìã Running service containers:"
          docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}" | grep letzgo-
          
          if [ $healthy_services -eq $total_services ]; then
            echo "üéâ All deployed services are healthy!"
          else
            echo "‚ö†Ô∏è  Some services are not healthy"
            exit 1
          fi
          EOF

      - name: Cleanup SSH
        if: always()
        run: |
          rm -f ~/.ssh/id_rsa

  # ===========================================================================
  # Cleanup Artifacts
  # ===========================================================================
  cleanup:
    name: Cleanup Artifacts
    runs-on: ubuntu-latest
    needs: [detect-changes, verify]
    if: always() && needs.detect-changes.outputs.services != ''
    
    strategy:
      matrix: ${{ fromJson(needs.detect-changes.outputs.matrix) }}
    
    steps:
      - name: Delete Docker image artifact
        uses: geekyeggo/delete-artifact@v2
        with:
          name: letzgo-${{ matrix.service }}-image
        continue-on-error: true

  # ===========================================================================
  # Notify Deployment Status
  # ===========================================================================
  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [detect-changes, deploy, verify]
    if: always() && needs.detect-changes.outputs.services != ''
    
    steps:
      - name: Notify success
        if: needs.verify.result == 'success'
        run: |
          echo "‚úÖ Service deployment successful!"
          echo "Services deployed: ${{ needs.detect-changes.outputs.services }}"
          echo "Environment: staging"
          echo "VPS: 103.168.19.241"

      - name: Notify failure
        if: needs.verify.result == 'failure' || needs.deploy.result == 'failure'
        run: |
          echo "‚ùå Service deployment failed!"
          echo "Services: ${{ needs.detect-changes.outputs.services }}"
          echo "Please check the deployment logs for details."
