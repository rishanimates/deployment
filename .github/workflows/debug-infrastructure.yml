name: üîç Debug Infrastructure

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform'
        required: true
        default: 'debug'
        type: choice
        options:
          - debug
          - fix
          - both

jobs:
  debug:
    name: Debug Infrastructure Issues
    runs-on: ubuntu-latest
    environment: staging
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.VPS_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -p ${{ secrets.VPS_PORT }} ${{ secrets.VPS_HOST }} >> ~/.ssh/known_hosts

      - name: Test SSH connection
        run: |
          ssh -p ${{ secrets.VPS_PORT }} -o StrictHostKeyChecking=no \
            ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} \
            "echo '‚úÖ SSH connection successful' && whoami && date"

      - name: Copy debug scripts
        run: |
          scp -P ${{ secrets.VPS_PORT }} -o StrictHostKeyChecking=no \
            debug-infrastructure.sh \
            fix-database-connections.sh \
            ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }}:/tmp/

      - name: Run debug analysis
        if: ${{ github.event.inputs.action == 'debug' || github.event.inputs.action == 'both' }}
        run: |
          ssh -p ${{ secrets.VPS_PORT }} -o StrictHostKeyChecking=no \
            ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} \
            "chmod +x /tmp/debug-infrastructure.sh && /tmp/debug-infrastructure.sh"

      - name: Run database connection fix
        if: ${{ github.event.inputs.action == 'fix' || github.event.inputs.action == 'both' }}
        run: |
          ssh -p ${{ secrets.VPS_PORT }} -o StrictHostKeyChecking=no \
            ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} \
            "chmod +x /tmp/fix-database-connections.sh && /tmp/fix-database-connections.sh"

      - name: Run final verification
        run: |
          ssh -p ${{ secrets.VPS_PORT }} -o StrictHostKeyChecking=no \
            ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} << 'EOF'
          
          echo "üîç Final Infrastructure Status:"
          echo ""
          
          # Check containers
          echo "üê≥ Running containers:"
          docker ps --format "table {{.Names}}\t{{.Status}}" | grep letzgo || echo "No containers running"
          echo ""
          
          # Test connections
          echo "üîó Connection tests:"
          
          if docker exec letzgo-postgres pg_isready -U postgres -d letzgo >/dev/null 2>&1; then
            echo "‚úÖ PostgreSQL: Connected"
          else
            echo "‚ùå PostgreSQL: Failed"
          fi
          
          if docker exec letzgo-mongodb mongosh --quiet --eval "db.adminCommand('ping')" >/dev/null 2>&1; then
            echo "‚úÖ MongoDB: Connected"
          else
            echo "‚ùå MongoDB: Failed"
          fi
          
          if docker exec letzgo-rabbitmq rabbitmqctl status >/dev/null 2>&1; then
            echo "‚úÖ RabbitMQ: Connected"
          else
            echo "‚ùå RabbitMQ: Failed"
          fi
          
          # Load Redis password if available
          if [ -f "/opt/letzgo/.env" ]; then
            REDIS_PASSWORD=$(grep REDIS_PASSWORD /opt/letzgo/.env | cut -d'=' -f2)
            if [ -n "$REDIS_PASSWORD" ] && docker exec letzgo-redis redis-cli --no-auth-warning -a "$REDIS_PASSWORD" ping >/dev/null 2>&1; then
              echo "‚úÖ Redis: Connected"
            else
              echo "‚ùå Redis: Failed"
            fi
          else
            echo "‚ö†Ô∏è Redis: Cannot test (no env file)"
          fi
          
          echo ""
          echo "üéØ Debug workflow completed at $(date)"
          EOF

      - name: Cleanup SSH
        if: always()
        run: rm -f ~/.ssh/id_rsa
