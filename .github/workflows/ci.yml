name: CI - Build and Test

on:
  pull_request:
    branches: [ main, develop ]
  push:
    branches: [ develop ]

env:
  NODE_VERSION: '18'

jobs:
  # ===========================================================================
  # Code Quality and Linting
  # ===========================================================================
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          # Install dependencies for each service
          services=("auth-service" "user-service" "chat-service" "event-service" "shared-service" "splitz-service")
          for service in "${services[@]}"; do
            echo "Installing dependencies for $service..."
            cd "$service"
            npm ci
            cd ..
          done

      - name: Run ESLint
        run: |
          services=("auth-service" "user-service" "event-service" "shared-service" "splitz-service")
          for service in "${services[@]}"; do
            echo "Running ESLint for $service..."
            cd "$service"
            npm run lint || echo "ESLint failed for $service"
            cd ..
          done

  # ===========================================================================
  # Build Services
  # ===========================================================================
  build:
    name: Build Services
    runs-on: ubuntu-latest
    needs: lint
    
    strategy:
      matrix:
        service: [auth-service, user-service, chat-service, event-service, shared-service, splitz-service]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies for ${{ matrix.service }}
        run: |
          cd ${{ matrix.service }}
          npm ci

      - name: Build Docker image for ${{ matrix.service }}
        run: |
          cd ${{ matrix.service }}
          docker build -t letzgo-${{ matrix.service }}:test .

      - name: Test Docker image
        run: |
          # Basic test to ensure the image runs
          docker run --rm -d --name test-${{ matrix.service }} \
            -e NODE_ENV=test \
            -e PORT=3000 \
            letzgo-${{ matrix.service }}:test || true
          sleep 5
          docker stop test-${{ matrix.service }} || true
          docker rm test-${{ matrix.service }} || true

  # ===========================================================================
  # Run Tests
  # ===========================================================================
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: lint
    
    services:
      postgres:
        image: timescale/timescaledb-ha:pg14-latest
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres123
          POSTGRES_DB: letzgo_test
          TIMESCALEDB_TELEMETRY: off
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      mongodb:
        image: mongo:6.0
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand(\"ping\")'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 27017:27017

      redis:
        image: redis:7.2-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          services=("auth-service" "user-service" "chat-service" "event-service" "shared-service" "splitz-service")
          for service in "${services[@]}"; do
            echo "Installing dependencies for $service..."
            cd "$service"
            npm ci
            cd ..
          done

      - name: Run tests
        env:
          POSTGRES_URL: postgresql://postgres:postgres123@localhost:5432/letzgo_test
          MONGO_URI: mongodb://localhost:27017/letzgo-test
          REDIS_HOST: localhost
          REDIS_PORT: 6379
          JWT_SECRET: test_jwt_secret_key_for_ci_cd_testing
          SERVICE_API_KEY: test_service_api_key_for_ci_cd_testing
        run: |
          services=("auth-service" "user-service" "shared-service" "splitz-service")
          for service in "${services[@]}"; do
            echo "Running tests for $service..."
            cd "$service"
            npm test || echo "Tests failed for $service"
            cd ..
          done

  # ===========================================================================
  # Security Scanning
  # ===========================================================================
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: lint
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Run npm audit
        run: |
          services=("auth-service" "user-service" "chat-service" "event-service" "shared-service" "splitz-service")
          for service in "${services[@]}"; do
            echo "Running security audit for $service..."
            cd "$service"
            npm audit --audit-level moderate || echo "Security issues found in $service"
            cd ..
          done

      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

  # ===========================================================================
  # Dependency Check
  # ===========================================================================
  dependency-check:
    name: Dependency Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Check for outdated dependencies
        run: |
          services=("auth-service" "user-service" "chat-service" "event-service" "shared-service" "splitz-service")
          for service in "${services[@]}"; do
            echo "Checking outdated dependencies for $service..."
            cd "$service"
            npm outdated || echo "Some dependencies are outdated in $service"
            cd ..
          done
