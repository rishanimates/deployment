name: üèóÔ∏è Deploy Infrastructure

on:
  workflow_dispatch:
    inputs:
      force_rebuild:
        description: 'Force complete rebuild'
        required: false
        default: false
        type: boolean

jobs:
  deploy:
    name: Deploy Infrastructure
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout deployment repo
        uses: actions/checkout@v4

      - name: Setup SSH connection
        run: |
          echo "üîß Setting up SSH connection..."
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          
          # Check if SSH key is provided
          if [ -z "${{ secrets.VPS_SSH_KEY }}" ]; then
            echo "‚ùå VPS_SSH_KEY secret is empty or not set"
            echo "Please check your GitHub repository secrets configuration"
            exit 1
          fi
          
          # Create SSH key file
          echo "${{ secrets.VPS_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          
          # Validate SSH key format
          if ssh-keygen -l -f ~/.ssh/id_rsa >/dev/null 2>&1; then
            echo "‚úÖ SSH key format is valid"
          else
            echo "‚ùå SSH key format is invalid - please check your VPS_SSH_KEY secret"
            echo "Key size: $(wc -c < ~/.ssh/id_rsa) bytes"
            exit 1
          fi
          
          # Add host to known_hosts
          ssh-keyscan -p ${{ secrets.VPS_PORT }} ${{ secrets.VPS_HOST }} >> ~/.ssh/known_hosts 2>/dev/null || true

      - name: Test SSH connection
        run: |
          echo "üîç Testing SSH connection..."
          ssh -p ${{ secrets.VPS_PORT }} -o StrictHostKeyChecking=no \
            ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} \
            "echo '‚úÖ SSH connection successful' && whoami" || {
            echo "‚ùå SSH connection failed"
            echo "Please verify:"
            echo "1. VPS_SSH_KEY contains the complete private key"
            echo "2. The public key is in ~/.ssh/authorized_keys on the VPS"
            echo "3. SSH service is running on port ${{ secrets.VPS_PORT }}"
            exit 1
          }

      - name: Deploy infrastructure to VPS
        run: |
          echo "üöÄ Deploying infrastructure to VPS..."
          
          # Copy and execute deployment script
          scp -P ${{ secrets.VPS_PORT }} -o StrictHostKeyChecking=no \
            deploy-infrastructure.sh \
            ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }}:/tmp/
          
          # Execute deployment
          ssh -p ${{ secrets.VPS_PORT }} -o StrictHostKeyChecking=no \
            ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} \
            "chmod +x /tmp/deploy-infrastructure.sh && /tmp/deploy-infrastructure.sh ${{ github.event.inputs.force_rebuild && '--force-rebuild' || '' }}"

      - name: Verify infrastructure deployment
        run: |
          echo "üîç Verifying infrastructure deployment..."
          
          ssh -p ${{ secrets.VPS_PORT }} -o StrictHostKeyChecking=no \
            ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} \
            "echo 'Checking deployment...' && \
             ls -la /opt/letzgo/.env.staging && \
             echo '‚úÖ Environment file exists' && \
             docker ps | grep letzgo && \
             echo '‚úÖ Infrastructure deployed successfully'"

      - name: Cleanup
        if: always()
        run: |
          rm -f ~/.ssh/id_rsa
          echo "‚úÖ Infrastructure deployment completed"